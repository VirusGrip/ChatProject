import os
from flask import json
import socketio
import requests
from PySide6.QtWidgets import QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QPushButton, QLabel, QLineEdit, QTextEdit, QListWidget, QMessageBox, QDialog, QListWidgetItem, QFileDialog,  QTextBrowser, QGridLayout, QToolButton, QScrollArea, QMenu
from PySide6.QtCore import Qt, QTimer
from PySide6.QtGui import QColor, QBrush, QTextCursor
import webbrowser
import urllib.parse
from functools import partial


HOST = 'http://10.1.3.187:12345'
sio = socketio.Client()
token = None

login_window = None
reg_window = None
main_window = None
current_username = None
user_listbox = None
chat_box = None
message_entry = None
all_user_data = []   # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
private_chat_windows = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–∫–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤
history_loaded = False  # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
unread_messages = {} 
chat_windows_state = {}  # –ù–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∫–æ–Ω —á–∞—Ç–æ–≤
# –¶–≤–µ—Ç–∞ –∏ —à—Ä–∏—Ñ—Ç—ã
BG_COLOR = "#1e1e1e"        # –§–æ–Ω–æ–≤—ã–π —Ü–≤–µ—Ç
TEXT_COLOR = "#e0e0e0"      # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
BUTTON_COLOR = "#0077ff"    # –¶–≤–µ—Ç –∫–Ω–æ–ø–æ–∫
BUTTON_HOVER_COLOR = "#0059b3"  # –¶–≤–µ—Ç –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
ENTRY_BG_COLOR = "#2b2b2b"  # –¶–≤–µ—Ç –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
HEADING_COLOR = "#c0c0c0"   # –¶–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
USER_COLOR = "#0077ff"      # –¶–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

def register():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    last_name = reg_last_name_entry.text()
    first_name = reg_first_name_entry.text()
    middle_name = reg_middle_name_entry.text()
    birth_date = reg_birth_date_entry.text()
    work_email = reg_work_email_entry.text()
    personal_email = reg_personal_email_entry.text()
    phone_number = reg_phone_number_entry.text()
    password = reg_password_entry.text()

    if not (last_name and first_name and middle_name and birth_date and password):
        QMessageBox.critical(reg_window, "–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–∏–Ω–∞
    username = f"{last_name}{first_name[0]}{middle_name[0]}"

    user_data = {
        'username': username,
        'password': password,
        'last_name': last_name,
        'first_name': first_name,
        'middle_name': middle_name,
        'birth_date': birth_date,
        'work_email': work_email,
        'personal_email': personal_email,
        'phone_number': phone_number
    }

    try:
        response = requests.post(f"{HOST}/register", json=user_data)
        if response.status_code == 201:
            QMessageBox.information(reg_window, "–£—Å–ø–µ—Ö", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
            reg_window.accept()
        else:
            QMessageBox.critical(reg_window, "–û—à–∏–±–∫–∞", response.json().get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
    except Exception as e:
        QMessageBox.critical(reg_window, "–û—à–∏–±–∫–∞", str(e))


def create_file_link(file_name):
    """–°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è —Ñ–∞–π–ª–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∫–æ–¥–∏—Ä—É—è –∏–º—è —Ñ–∞–π–ª–∞."""
    return f"{HOST}/uploads/{urllib.parse.quote(file_name)}"

def open_emoji_picker(target_widget=None):
    print(f"–¢–∏–ø –≤–∏–¥–∂–µ—Ç–∞: {type(target_widget)}")  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if not isinstance(target_widget, (QTextEdit, QTextBrowser)):
        print("–û—à–∏–±–∫–∞: target_widget –Ω–µ —è–≤–ª—è–µ—Ç—Å—è QTextEdit –∏–ª–∏ QTextBrowser")
        return
    emoji_window = QDialog(main_window)
    emoji_window.setWindowTitle("–í—ã–±–æ—Ä —ç–º–æ–¥–∑–∏")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π —Ñ–æ–Ω –¥–ª—è –æ–∫–Ω–∞ –∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    emoji_window.setStyleSheet("background-color: #ADD8E6;")  # –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π —Ü–≤–µ—Ç
    emoji_window.setFixedSize(400, 300)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞

    scroll_area = QScrollArea(emoji_window)
    scroll_area.setWidgetResizable(True)

    emoji_container = QWidget()
    layout = QGridLayout(emoji_container)

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä —ç–º–æ–¥–∑–∏ (–∫–∞–∫ –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ)
    standard_emojis = [
        "üòÄ", "üòÅ", "üòÇ", "ü§£", "üòÉ", "üòÑ", "üòÖ", "üòÜ", "üòâ", "üòä",
        "üòã", "üòé", "üòç", "üòò", "üòó", "üòô", "üòö", "üôÇ", "ü§ó", "ü§î",
        "üòê", "üòë", "üò∂", "üôÑ", "üòè", "üò£", "üò•", "üòÆ", "ü§ê", "üëΩ",
        "üòØ", "üò™", "üò´", "üò¥", "üòå", "üòõ", "üòú", "üòù", "ü§§", "üòí",
        "üòì", "üòî", "üòï", "üôÉ", "ü§ë", "üò≤", "‚òπÔ∏è", "üôÅ", "üòñ", "üòû",
        "üòü", "üò§", "üò¢", "üò≠", "üò¶", "üòß", "üò®", "üò©", "üò∞", "üò±",
        "üò≥", "üòµ", "üò°", "üò†", "üò∑", "ü§í", "ü§ï", "ü§¢", "üëª", "üíÄ",
        "ü§ß", "üòá", "ü§†", "ü§°", "ü§•", "ü§ì", "üòà", "üëø", "üëπ", "üë∫",  
        "ü§ñ", "üí©", "üò∫", "üò∏", "üòπ", "üòª", "üòº", "üòΩ", "üôÄ", "üòø",
        "üòæ", "üôà", "üôâ", "üôä", "üêµ", "üê∂", "üê±", "üê≠", "üêπ", "üê∞",
        "ü¶ä", "üêª", "üêº", "üê®", "üêØ", "ü¶Å", "üêÆ", "üê∑", "üêΩ", "üê∏",
        "üêµ", "üêî", "üêß", "üê¶", "üê§", "üê£", "üê•", "ü¶Ü", "ü¶Ö", "ü¶â"
    ]

    row, col = 0, 0
    for symbol in standard_emojis:
        button = QToolButton()
        button.setText(symbol)

        # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫–Ω–æ–ø–∫–∞–º–∏
        button.setStyleSheet("margin: 2px; padding: 5px; font-size: 16px;")  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –∏ —à—Ä–∏—Ñ—Ç

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º partial –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        button.clicked.connect(partial(insert_emoji, symbol, target_widget))
        layout.addWidget(button, row, col)
        col += 1
        if col > 4:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
            col = 0
            row += 1

    emoji_container.setLayout(layout)
    scroll_area.setWidget(emoji_container)

    main_layout = QVBoxLayout(emoji_window)
    main_layout.addWidget(scroll_area)
    emoji_window.setLayout(main_layout)

    emoji_window.exec()

def insert_emoji(symbol, target_widget):
    """–í—Å—Ç–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ."""
    if isinstance(target_widget, QTextEdit) or isinstance(target_widget, QTextBrowser):
        current_cursor = target_widget.textCursor()
        current_cursor.insertText(symbol)
    else:
        print("–û—à–∏–±–∫–∞: target_widget –Ω–µ —è–≤–ª—è–µ—Ç—Å—è QTextEdit –∏–ª–∏ QTextBrowser")

def send_private_file(recipient_username):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç."""
    file_path, _ = QFileDialog.getOpenFileName(main_window, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª")
    if file_path:
        file_name = os.path.basename(file_path)
        with open(file_path, 'rb') as file:
            file_data = file.read()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
            sio.emit('private_file_upload', {
                'to': recipient_username, 
                'file_name': file_name, 
                'file_data': file_data, 
                'from': current_username
            })

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ –≤ –æ–∫–Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
        file_url = create_file_link(file_name)
        private_chat_windows[recipient_username]['text_edit'].append(
            f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–∞–π–ª: <a href='{file_url}' style='color: {USER_COLOR}; text-decoration: none;'>{file_name}</a>"
        )
        private_chat_windows[recipient_username]['text_edit'].append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è


def create_download_button(file_name, file_data):
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∏ —Å–≤—è–∑—ã–≤–∞–µ—Ç –µ–µ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
    button = QPushButton(f"–°–∫–∞—á–∞—Ç—å {file_name}")
    button.clicked.connect(lambda: save_file(file_name, file_data))
    return button

def send_file(recipient_username):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä."""
    file_path, _ = QFileDialog.getOpenFileName(main_window, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª")
    if file_path:
        file_name = os.path.basename(file_path)
        with open(file_path, 'rb') as file:
            file_data = file.read()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            sio.emit('file_upload', {'file_name': file_name, 'file_data': file_data, 'to': recipient_username})
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ –≤ –æ–∫–Ω–æ —á–∞—Ç–∞
        file_url = create_file_link(file_name)
        chat_box.append(f"<a href='{file_url}' style='color: {USER_COLOR}; text-decoration: none;'>–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–∞–π–ª: {file_name}</a>")
        chat_box.append("")  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è



def open_registration_window():
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    global reg_window, reg_last_name_entry, reg_first_name_entry, reg_middle_name_entry, reg_birth_date_entry, reg_work_email_entry, reg_personal_email_entry, reg_phone_number_entry, reg_password_entry

    reg_window = QDialog(login_window)
    reg_window.setWindowTitle("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
    reg_window.setStyleSheet(f"background-color: {BG_COLOR};")

    layout = QVBoxLayout()

    last_name_label = QLabel("–§–∞–º–∏–ª–∏—è", reg_window)
    last_name_label.setStyleSheet(f"color: {HEADING_COLOR}; font-weight: bold;")
    layout.addWidget(last_name_label)

    reg_last_name_entry = QLineEdit(reg_window)
    reg_last_name_entry.setStyleSheet(f"background-color: {ENTRY_BG_COLOR}; border-radius: 10px; padding: 10px; color: {TEXT_COLOR};")
    layout.addWidget(reg_last_name_entry)

    first_name_label = QLabel("–ò–º—è", reg_window)
    first_name_label.setStyleSheet(f"color: {HEADING_COLOR}; font-weight: bold;")
    layout.addWidget(first_name_label)

    reg_first_name_entry = QLineEdit(reg_window)
    reg_first_name_entry.setStyleSheet(f"background-color: {ENTRY_BG_COLOR}; border-radius: 10px; padding: 10px; color: {TEXT_COLOR};")
    layout.addWidget(reg_first_name_entry)

    middle_name_label = QLabel("–û—Ç—á–µ—Å—Ç–≤–æ", reg_window)
    middle_name_label.setStyleSheet(f"color: {HEADING_COLOR}; font-weight: bold;")
    layout.addWidget(middle_name_label)

    reg_middle_name_entry = QLineEdit(reg_window)
    reg_middle_name_entry.setStyleSheet(f"background-color: {ENTRY_BG_COLOR}; border-radius: 10px; padding: 10px; color: {TEXT_COLOR};")
    layout.addWidget(reg_middle_name_entry)

    birth_date_label = QLabel("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", reg_window)
    birth_date_label.setStyleSheet(f"color: {HEADING_COLOR}; font-weight: bold;")
    layout.addWidget(birth_date_label)

    reg_birth_date_entry = QLineEdit(reg_window)
    reg_birth_date_entry.setStyleSheet(f"background-color: {ENTRY_BG_COLOR}; border-radius: 10px; padding: 10px; color: {TEXT_COLOR};")
    layout.addWidget(reg_birth_date_entry)

    work_email_label = QLabel("–†–∞–±–æ—á–∞—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞", reg_window)
    work_email_label.setStyleSheet(f"color: {HEADING_COLOR}; font-weight: bold;")
    layout.addWidget(work_email_label)

    reg_work_email_entry = QLineEdit(reg_window)
    reg_work_email_entry.setStyleSheet(f"background-color: {ENTRY_BG_COLOR}; border-radius: 10px; padding: 10px; color: {TEXT_COLOR};")
    layout.addWidget(reg_work_email_entry)

    personal_email_label = QLabel("–õ–∏—á–Ω–∞—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)", reg_window)
    personal_email_label.setStyleSheet(f"color: {HEADING_COLOR}; font-weight: bold;")
    layout.addWidget(personal_email_label)

    reg_personal_email_entry = QLineEdit(reg_window)
    reg_personal_email_entry.setStyleSheet(f"background-color: {ENTRY_BG_COLOR}; border-radius: 10px; padding: 10px; color: {TEXT_COLOR};")
    layout.addWidget(reg_personal_email_entry)

    phone_number_label = QLabel("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reg_window)
    phone_number_label.setStyleSheet(f"color: {HEADING_COLOR}; font-weight: bold;")
    layout.addWidget(phone_number_label)

    reg_phone_number_entry = QLineEdit(reg_window)
    reg_phone_number_entry.setStyleSheet(f"background-color: {ENTRY_BG_COLOR}; border-radius: 10px; padding: 10px; color: {TEXT_COLOR};")
    layout.addWidget(reg_phone_number_entry)

    password_label = QLabel("–ü–∞—Ä–æ–ª—å", reg_window)
    password_label.setStyleSheet(f"color: {HEADING_COLOR}; font-weight: bold;")
    layout.addWidget(password_label)

    reg_password_entry = QLineEdit(reg_window)
    reg_password_entry.setStyleSheet(f"background-color: {ENTRY_BG_COLOR}; border-radius: 10px; padding: 10px; color: {TEXT_COLOR};")
    reg_password_entry.setEchoMode(QLineEdit.Password)
    layout.addWidget(reg_password_entry)

    button_layout = QHBoxLayout()
    register_button = QPushButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", reg_window)
    register_button.setStyleSheet(f"background-color: {BUTTON_COLOR}; color: {TEXT_COLOR}; border-radius: 10px; padding: 10px;")
    register_button.clicked.connect(register)
    button_layout.addWidget(register_button)

    cancel_button = QPushButton("–û—Ç–º–µ–Ω–∞", reg_window)
    cancel_button.setStyleSheet(f"background-color: {BUTTON_COLOR}; color: {TEXT_COLOR}; border-radius: 10px; padding: 10px;")
    cancel_button.clicked.connect(reg_window.reject)
    button_layout.addWidget(cancel_button)

    layout.addLayout(button_layout)
    reg_window.setLayout(layout)
    reg_window.exec()


def login():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    global login_window, username_entry, password_entry, token, current_username

    username = username_entry.text()
    password = password_entry.text()

    if not username or not password:
        QMessageBox.critical(login_window, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å!")
        return

    try:
        response = requests.post(f"{HOST}/login", json={'username': username, 'password': password})
        if response.status_code == 200:
            token = response.json().get('token')
            current_username = username  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            login_window.close()
            setup_main_window()
        else:
            QMessageBox.critical(login_window, "–û—à–∏–±–∫–∞", response.json().get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
    except Exception as e:
        QMessageBox.critical(login_window, "–û—à–∏–±–∫–∞", str(e))

def connect_socket():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —á–µ—Ä–µ–∑ WebSocket."""
    global token

    sio.connect(HOST, headers={'Authorization': f'Bearer {token}'})

@sio.event
def connect():
    print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

@sio.event
def disconnect():
    print("–û—Ç–∫–ª—é—á–µ–Ω–∏–µ")

@sio.event
def all_users(users):
    global all_user_data, unread_messages

    if isinstance(users, dict):
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        all_user_data = [{'username': username, **details} for username, details in users.items()]
        unread_messages = {user['username']: unread_messages.get(user['username'], 0) for user in all_user_data}

        update_user_listbox()
    else:
        print("Unexpected data format:", users)

@sio.event
def unread_counts(data):
    global unread_messages
    if isinstance(data, dict):
        unread_messages.update(data)
        update_user_listbox()
    else:
        print("Unexpected data format:", data)

@sio.event
def global_message(data):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ–±—â–µ–≥–æ —á–∞—Ç–∞."""
    if 'text' in data and 'sender' in data:
        text = data['text']
        sender = data['sender']

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π (—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π)
        chat_box.append(f"{sender}: {text}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–∑—É–Ω–æ–∫ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scrollbar = chat_box.verticalScrollBar()
        scrollbar.setValue(scrollbar.maximum())

def save_file(file_name, file_data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ –¥–∏—Å–∫."""
    file_path = QFileDialog.getSaveFileName(main_window, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª", file_name)[0]
    if file_path:
        try:
            with open(file_path, 'wb') as file:
                file.write(file_data)
            QMessageBox.information(main_window, "–£—Å–ø–µ—Ö", f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {file_path}")
        except Exception as e:
            QMessageBox.critical(main_window, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {str(e)}")
def file_received(data):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤."""
    from_user = data.get('from')
    file_name = data.get('file_name')
    file_url = create_file_link(file_name)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—É—Ç—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º

    if file_name and file_url:
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –≤ —á–∞—Ç
        link_html = f"<a href='{file_url}' style='color: {USER_COLOR}; text-decoration: none;'>{file_name}</a>"
        chat_box.append(f"{from_user}: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: {link_html}")
        chat_box.setTextInteractionFlags(Qt.TextBrowserInteraction)  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º (–∫–ª–∏–∫–∏ –ø–æ —Å—Å—ã–ª–∫–∞–º)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —á–∞—Ç –≤–Ω–∏–∑
        chat_box.verticalScrollBar().setValue(chat_box.verticalScrollBar().maximum())
    else:
        chat_box.append(f"{from_user}: –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª, –Ω–æ –∏–º—è —Ñ–∞–π–ª–∞ –∏–ª–∏ URL –Ω–µ —É–∫–∞–∑–∞–Ω—ã.")



def handle_link_click(url):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ —Å—Å—ã–ª–∫–∞–º."""
    webbrowser.open(url.toString())  # –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ


def open_link(url):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –≤ –≤–µ–±-–±—Ä–∞—É–∑–µ—Ä–µ."""
    webbrowser.open(url)

def handle_link_click(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–æ–∫."""
    cursor = chat_box.textCursor()
    cursor.select(QTextCursor.LinkUnderCursor)
    link = cursor.selectedText()
    open_link(link)

@sio.event
def private_message(data):
    sender = data.get('from')
    recipient = data.get('to')
    message = data.get('text')
    file_name = data.get('file_name')
    file_data = data.get('file_data')

    if sender == current_username:
        return

    if recipient == current_username:
        if sender in private_chat_windows and private_chat_windows[sender]['window'].isVisible():
            private_chat_text_edit = private_chat_windows[sender]['text_edit']

            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–∞–π–ª
            if file_name and file_data:
                save_file(file_name, file_data)
                file_url = create_file_link(file_name)
                private_chat_text_edit.append(f"{sender}: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: <a href='{file_url}' style='color: {USER_COLOR}; text-decoration: none;'>{file_name}</a>")
            else:
                private_chat_text_edit.append(f"{sender}: {message}")

            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —á–∞—Ç –¥–æ —Å–∞–º–æ–≥–æ –Ω–∏–∑–∞
            scrollbar = private_chat_text_edit.verticalScrollBar()
            scrollbar.setValue(scrollbar.maximum())

            # –ï—Å–ª–∏ –æ–∫–Ω–æ —á–∞—Ç–∞ —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∞–∫—Ç–∏–≤–Ω–æ, –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if private_chat_windows[sender]['window'].isVisible() and private_chat_windows[sender]['window'].isActiveWindow():
                unread_messages[sender] = 0
            else:
                unread_messages[sender] += 1

        else:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —Ç–∞–∫ –∫–∞–∫ –æ–∫–Ω–æ —á–∞—Ç–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            unread_messages[sender] = unread_messages.get(sender, 0) + 1

        update_user_listbox()
    else:
        print(f"–ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {sender} –Ω–µ –æ—Ç–∫—Ä—ã—Ç")

@sio.event
def message_received(data):
    sender = data.get('from')
    text = data.get('text')
    chat_type = data.get('type')

    if chat_type == 'private':
        unread_messages[sender] = unread_messages.get(sender, 0) + 1
        update_user_listbox()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    if chat_type == 'global':
        chat_box.append(f"{sender}: {text}")
    elif sender in private_chat_windows:
        private_chat_windows[sender]['text_edit'].append(f"{sender}: {text}")
        if private_chat_windows[sender]['window'].isVisible():
            unread_messages[sender] = 0
    else:
        update_user_listbox()

@sio.event
def chat_history(data):
    global history_loaded
    messages = data.get('messages', [])
    chat_type = data.get('type', 'unknown')
    username = data.get('username', '')

    if chat_type == 'global':
        if not history_loaded:
            for msg in messages:
                if 'file_name' in msg:
                    link_html = f"<a href='{msg.get('file_path')}' style='color: {USER_COLOR}; text-decoration: none;'>{msg.get('file_name')}</a>"
                    chat_box.append(f"{msg.get('sender', 'Unknown')}: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: {link_html}")
                else:
                    chat_box.append(f"{msg.get('sender', 'Unknown')}: {msg.get('text', '')}")
            
            scrollbar = chat_box.verticalScrollBar()
            scrollbar.setValue(scrollbar.maximum())
            history_loaded = True
    elif chat_type == 'private' and username in private_chat_windows:
        text_edit = private_chat_windows[username]['text_edit']
        for msg in messages:
            if 'file_name' in msg:
                link_html = f"<a href='{msg.get('file_path')}' style='color: {USER_COLOR}; text-decoration: none;'>{msg.get('file_name')}</a>"
                text_edit.append(f"{msg.get('sender', 'Unknown')}: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: {link_html}")
            else:
                text_edit.append(f"{msg.get('sender', 'Unknown')}: {msg.get('text', '')}")

        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
        scrollbar = text_edit.verticalScrollBar()
        scrollbar.setValue(scrollbar.maximum())

def send_message():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±—â–∏–π —á–∞—Ç –∏–ª–∏ –ª–∏—á–Ω—ã–π —á–∞—Ç."""
    global current_username

    text = message_entry.toPlainText().strip()
    if text:
        message_entry.clear()
        sio.emit('global_message', {'text': text, 'sender': current_username})
        chat_box.append(f"{current_username}: {text}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–∑—É–Ω–æ–∫ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scrollbar = chat_box.verticalScrollBar()
        scrollbar.setValue(scrollbar.maximum())
def update_user_listbox():
    global user_listbox, all_user_data, unread_messages, private_chat_windows, current_username

    user_listbox.clear()

    if isinstance(all_user_data, list) and all(isinstance(user, dict) for user in all_user_data):
        for user in all_user_data:
            username = user.get('username')
            if username:
                item_text = username
                item = QListWidgetItem(item_text)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ–µ –æ–∫–Ω–æ —á–∞—Ç–∞ –∏ –≤–∏–¥–∏–º–æ –ª–∏ –æ–Ω–æ
                if username in private_chat_windows and private_chat_windows[username]['window'].isVisible():
                    unread_messages[username] = 0

                # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if username != current_username and unread_messages.get(username, 0) > 0:
                    item_text += f" ‚ö†Ô∏è "
                    item.setText(item_text)
                    item.setForeground(QBrush(QColor("red")))
                    font = item.font()
                    font.setBold(True)
                    item.setFont(font)
                else:
                    item.setForeground(QBrush(QColor(USER_COLOR)))

                user_listbox.addItem(item)
    else:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö:", all_user_data)
def close_private_chat(username):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ —á–∞—Ç–∞."""
    global chat_windows_state

    if username in private_chat_windows:
        private_chat_windows[username]['window'].close()
        chat_windows_state[username] = False  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–µ
        update_user_listbox()
    
def open_user_profile(username):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_data = next((user for user in all_user_data if user['username'] == username), None)
    
    if not user_data:
        QMessageBox.critical(main_window, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    profile_window = QDialog(main_window)
    profile_window.setWindowTitle(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
    profile_window.setStyleSheet(f"background-color: {BG_COLOR}; color: {TEXT_COLOR};")
    
    layout = QVBoxLayout()

    profile_text_browser = QTextBrowser()
    profile_text_browser.setOpenExternalLinks(True)  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ –≤–æ –≤–Ω–µ—à–Ω–µ–º –±—Ä–∞—É–∑–µ—Ä–µ
    profile_text_browser.setTextInteractionFlags(Qt.TextBrowserInteraction)  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º (–≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ)
    profile_text_browser.setStyleSheet(f"""
        background-color: {ENTRY_BG_COLOR};
        border-radius: 10px;
        padding: 10px;
        color: white;
        border: 2px solid {BUTTON_COLOR};
    """)

    # –§–æ—Ä–º–∏—Ä—É–µ–º HTML-–∫–æ–¥ –¥–ª—è QTextBrowser
    profile_text = f"""
    <html>
    <head>
        <style>
            .profile-label {{
                font-weight: bold;
                color: lightblue;  /* –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π —Ü–≤–µ—Ç –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ */
            }}
            .profile-value {{
                color: white;  /* –ë–µ–ª—ã–π —Ü–≤–µ—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–∞ */
                background-color: {ENTRY_BG_COLOR};  /* –§–æ–Ω–æ–≤—ã–π —Ü–≤–µ—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–∞ */
                padding: 5px;
                border: 1px solid {BUTTON_COLOR};  /* –†–∞–º–∫–∞ –≤–æ–∫—Ä—É–≥ —Ç–µ–∫—Å—Ç–∞ */
                border-radius: 5px;
                display: inline-block;
                margin-bottom: 5px;
            }}
            p {{
                margin: 0;  /* –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –≤–æ–∫—Ä—É–≥ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ */
            }}
        </style>
    </head>
    <body>
        <p><span class="profile-label">–§–∞–º–∏–ª–∏—è:</span> <span class="profile-value">{user_data.get('last_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</span></p>
        <p><span class="profile-label">–ò–º—è:</span> <span class="profile-value">{user_data.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</span></p>
        <p><span class="profile-label">–û—Ç—á–µ—Å—Ç–≤–æ:</span> <span class="profile-value">{user_data.get('middle_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</span></p>
        <p><span class="profile-label">–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</span> <span class="profile-value">{user_data.get('birth_date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</span></p>
        <p><span class="profile-label">–†–∞–±–æ—á–∏–π email:</span> <span class="profile-value">{user_data.get('work_email', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</span></p>
        <p><span class="profile-label">–õ–∏—á–Ω—ã–π email:</span> <span class="profile-value">{user_data.get('personal_email', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</span></p>
        <p><span class="profile-label">–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</span> <span class="profile-value">{user_data.get('phone_number', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</span></p>
    </body>
    </html>
    """

    profile_text_browser.setHtml(profile_text)

    layout.addWidget(profile_text_browser)
    profile_window.setLayout(layout)
    profile_window.exec_()

def start_private_chat(username):
    global private_chat_windows

    # –ï—Å–ª–∏ –æ–∫–Ω–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∞–µ–º –µ–≥–æ –≤–∏–¥–∏–º—ã–º
    if username in private_chat_windows:
        private_chat_windows[username]['window'].show()
        private_chat_windows[username]['window'].raise_()
        private_chat_windows[username]['window'].activateWindow()
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞
        unread_messages[username] = 0
        update_user_listbox()
        return

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ —á–∞—Ç–∞
    private_chat_window = QWidget()
    private_chat_window.setWindowTitle(f"–õ–∏—á–Ω—ã–π —á–∞—Ç —Å {username}")
    private_chat_window.setStyleSheet(f"background-color: {BG_COLOR};")

    layout = QVBoxLayout(private_chat_window)

    text_edit = QTextBrowser()
    text_edit.setOpenExternalLinks(True)  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ –≤–æ –≤–Ω–µ—à–Ω–µ–º –±—Ä–∞—É–∑–µ—Ä–µ
    text_edit.setStyleSheet(f"""
        background-color: {ENTRY_BG_COLOR};
        border-radius: 10px;
        padding: 10px;
        color: {TEXT_COLOR};
        border: 2px solid {BUTTON_COLOR};
    """)
    layout.addWidget(text_edit)

    input_frame = QWidget()
    input_layout = QHBoxLayout(input_frame)
    
    private_message_entry = QTextEdit()
    private_message_entry.setStyleSheet(f"""
        background-color: {ENTRY_BG_COLOR};
        border-radius: 10px;
        padding: 5px;
        color: {TEXT_COLOR};
        border: 2px solid {BUTTON_COLOR};
        border-top: 3px solid {BUTTON_HOVER_COLOR};
    """)
    input_layout.addWidget(private_message_entry)
    
    send_button = QPushButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
    send_button.setStyleSheet(f"background-color: {BUTTON_COLOR}; color: {TEXT_COLOR}; border-radius: 10px; padding: 10px;")
    send_button.clicked.connect(lambda: send_private_message(username, private_message_entry))
    input_layout.addWidget(send_button)
    
    send_file_button = QPushButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª")
    send_file_button.setStyleSheet(f"background-color: {BUTTON_COLOR}; color: {TEXT_COLOR}; border-radius: 10px; padding: 10px;")
    send_file_button.clicked.connect(lambda: send_private_file(username))
    input_layout.addWidget(send_file_button)
    
    emoji_button = QPushButton("üòÄ")
    emoji_button.setStyleSheet(f"background-color: {BUTTON_COLOR}; color: {TEXT_COLOR}; border-radius: 10px; padding: 10px;")
    emoji_button.clicked.connect(lambda: open_emoji_picker(private_message_entry))
    input_layout.addWidget(emoji_button)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è"
    view_profile_button = QPushButton("–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è")
    view_profile_button.setStyleSheet(f"background-color: {BUTTON_COLOR}; color: {TEXT_COLOR}; border-radius: 10px; padding: 10px;")
    view_profile_button.clicked.connect(lambda: open_user_profile(username))
    input_layout.addWidget(view_profile_button)

    layout.addWidget(input_frame)

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–∫–Ω–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
    private_chat_windows[username] = {
        'window': private_chat_window,
        'text_edit': text_edit,
        'message_entry': private_message_entry
    }

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    sio.emit('request_chat_history', {'type': 'private', 'username': username})
    sio.emit('mark_messages_as_read', {'username': username})
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞
    unread_messages[username] = 0
    update_user_listbox()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ —á–∞—Ç–∞
    private_chat_window.show()
    private_chat_window.raise_()
    private_chat_window.activateWindow()

def send_private_message(username, message_entry):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    text = message_entry.toPlainText().strip()
    if text:
        message_entry.clear()
        sio.emit('private_message', {'to': username, 'text': text, 'from': current_username})
        private_chat_windows[username]['text_edit'].append(f"{current_username}: {text}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–∑—É–Ω–æ–∫ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scrollbar = private_chat_windows[username]['text_edit'].verticalScrollBar()
        scrollbar.setValue(scrollbar.maximum())

def setup_main_window():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    global main_window, chat_box, message_entry, user_listbox

    main_window = QMainWindow()
    main_window.setWindowTitle("–ß–∞—Ç")
    main_window.setStyleSheet(f"background-color: {BG_COLOR};")

    central_widget = QWidget()
    main_window.setCentralWidget(central_widget)
    layout = QHBoxLayout(central_widget)

    user_frame = QWidget()
    user_layout = QVBoxLayout(user_frame)
    user_label = QLabel("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", main_window)
    user_label.setStyleSheet(f"color: {HEADING_COLOR}; font-weight: bold;")
    user_layout.addWidget(user_label)
    user_listbox = QListWidget()
    user_listbox.setStyleSheet(f"background-color: {ENTRY_BG_COLOR}; border-radius: 10px; padding: 10px; color: {TEXT_COLOR};")
    user_listbox.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
    user_listbox.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)
    user_layout.addWidget(user_listbox)
    user_frame.setFixedWidth(200)
    layout.addWidget(user_frame)

    chat_frame = QWidget()
    chat_layout = QVBoxLayout(chat_frame)

    # –ó–∞–º–µ–Ω—è–µ–º QTextEdit –Ω–∞ QTextBrowser
    chat_box = QTextBrowser()
    chat_box.setOpenExternalLinks(True)  # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    chat_box.setStyleSheet(f"""
        background-color: {ENTRY_BG_COLOR};
        border-radius: 10px;
        padding: 10px;
        color: {TEXT_COLOR};
        border: 2px solid {BUTTON_COLOR};
    """)
    chat_box.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
    chat_box.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)
    chat_layout.addWidget(chat_box)

    # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º input_frame –∏ –µ–≥–æ –≤–∏–¥–∂–µ—Ç—ã
    input_frame = QWidget()
    input_layout = QHBoxLayout(input_frame)

    message_entry = QTextEdit()
    message_entry.setStyleSheet(f"""
        background-color: {ENTRY_BG_COLOR};
        border-radius: 10px;
        padding: 5px;
        color: {TEXT_COLOR};
        border: 2px solid {BUTTON_COLOR};
        border-top: 3px solid {BUTTON_HOVER_COLOR};
    """)
    input_layout.addWidget(message_entry)

    send_button = QPushButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
    send_button.setStyleSheet(f"background-color: {BUTTON_COLOR}; color: {TEXT_COLOR}; border-radius: 10px; padding: 10px;")
    send_button.clicked.connect(send_message)
    input_layout.addWidget(send_button)

    send_file_button = QPushButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª")
    send_file_button.setStyleSheet(f"background-color: {BUTTON_COLOR}; color: {TEXT_COLOR}; border-radius: 10px; padding: 10px;")
    send_file_button.clicked.connect(lambda: send_file(current_username))
    input_layout.addWidget(send_file_button)

    emoji_button = QPushButton("üòÄ")
    emoji_button.setStyleSheet(f"background-color: {BUTTON_COLOR}; color: {TEXT_COLOR}; border-radius: 10px; padding: 10px;")
    emoji_button.clicked.connect(lambda: open_emoji_picker(message_entry))  # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —á–∞—Ç–∞
    input_layout.addWidget(emoji_button)

    chat_layout.addWidget(input_frame)
    layout.addWidget(chat_frame)

    user_listbox.itemDoubleClicked.connect(lambda item: start_private_chat(item.text().split(' ')[0]))

    connect_socket()

    if not history_loaded:
        sio.emit('request_chat_history', {'type': 'global'})

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ —Å—Å—ã–ª–∫–∞–º
    chat_box.anchorClicked.connect(handle_link_click)

    main_window.show()


def open_login_window():
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –≤—Ö–æ–¥–∞."""
    global login_window, username_entry, password_entry

    login_window = QDialog()
    login_window.setWindowTitle("–í—Ö–æ–¥")
    login_window.setStyleSheet(f"background-color: {BG_COLOR};")

    layout = QVBoxLayout()

    username_label = QLabel("–õ–æ–≥–∏–Ω", login_window)
    username_label.setStyleSheet(f"color: {HEADING_COLOR}; font-weight: bold;")
    layout.addWidget(username_label)

    username_entry = QLineEdit(login_window)
    username_entry.setStyleSheet(f"background-color: {ENTRY_BG_COLOR}; border-radius: 10px; padding: 10px; color: {TEXT_COLOR};")
    layout.addWidget(username_entry)

    password_label = QLabel("–ü–∞—Ä–æ–ª—å", login_window)
    password_label.setStyleSheet(f"color: {HEADING_COLOR}; font-weight: bold;")
    layout.addWidget(password_label)

    password_entry = QLineEdit(login_window)
    password_entry.setStyleSheet(f"background-color: {ENTRY_BG_COLOR}; border-radius: 10px; padding: 10px; color: {TEXT_COLOR};")
    password_entry.setEchoMode(QLineEdit.Password)
    layout.addWidget(password_entry)

    button_layout = QHBoxLayout()
    login_button = QPushButton("–í–æ–π—Ç–∏", login_window)
    login_button.setStyleSheet(f"background-color: {BUTTON_COLOR}; color: {TEXT_COLOR}; border-radius: 10px; padding: 10px;")
    login_button.clicked.connect(login)
    button_layout.addWidget(login_button)

    register_button = QPushButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", login_window)
    register_button.setStyleSheet(f"background-color: {BUTTON_COLOR}; color: {TEXT_COLOR}; border-radius: 10px; padding: 10px;")
    register_button.clicked.connect(open_registration_window)
    button_layout.addWidget(register_button)

    layout.addLayout(button_layout)
    login_window.setLayout(layout)
    login_window.exec()

if __name__ == "__main__":
    app = QApplication([])

    open_login_window()

    app.exec()
